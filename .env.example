# ===== 🚀 Droid2API 五级认证配置 =====
#
# 认证优先级（从高到低）：
# 1️⃣ FACTORY_API_KEY 环境变量（单用户模式，最高优先级）
# 2️⃣ 密钥池管理（多用户模式，通过管理 API 添加，支持轮询算法）
# 3️⃣ DROID_REFRESH_KEY 环境变量（OAuth 自动刷新，兼容原 droid2api）
# 4️⃣ data/auth.json / ~/.factory/auth.json（文件认证，向后兼容）
# 5️⃣ 客户端 Authorization Header（透传模式，由 middleware 处理）
#
# 📖 选择建议：
#   - 个人使用 / 单密钥 → 使用 FACTORY_API_KEY（最简单）
#   - 多密钥 / 负载均衡 → 使用密钥池（最强大）
#   - 需要自动刷新 → 使用 DROID_REFRESH_KEY（最灵活）
#

# ===== 基础配置 =====

# 反向代理访问密钥 (客户端必须携带此密钥才能访问API)
# 在请求头中使用: Authorization: Bearer your-secure-access-key
API_ACCESS_KEY=123

# 管理后台访问密钥 (访问管理API必须携带)
# 在请求头中使用: x-admin-key: your-admin-key-here
ADMIN_ACCESS_KEY=123

# 服务端口
PORT=3000

# 开发模式 (true: 显示详细日志, false: 生产模式)
NODE_ENV=true

# ===== 1️⃣ 单密钥模式（最高优先级，默认注释） =====
#
# 使用场景：个人使用 / 单密钥 / Docker 部署
# 优点：配置简单，环境变量配置，Docker 友好
# 缺点：无轮询，无负载均衡，配额耗尽无兜底
#
# 📌 注意：如果设置了 FACTORY_API_KEY，将跳过密钥池、OAuth 等所有其他认证方式！
#
# FACTORY_API_KEY=fk-OaXm1XUDmmQG44QTVxpK-gK2k5eskQTEW-cGsx50XgR_dCW_IvBmpOIn3PzoDzOg

# ===== 3️⃣ OAuth 自动刷新模式（第三优先级，默认注释） =====
#
# 使用场景：需要自动刷新 token / 兼容原 droid2api 项目
# 优点：自动刷新（6 小时间隔），失败时使用旧 token 兜底
# 缺点：依赖 WorkOS API，需要有效的 refresh_token
#
# 📌 支持三种配置方式（优先级从高到低）：
#   1. 环境变量：DROID_REFRESH_KEY=rt-your-refresh-token
#   2. 项目级文件：data/auth.json（Docker 友好，推荐⭐）
#   3. 用户级文件：~/.factory/auth.json（跨项目共享，兜底）
#
# DROID_REFRESH_KEY=your_refresh_token_here
#
# 或者创建 data/auth.json 文件（推荐）：
# {
#   "refresh_token": "rt-your-refresh-token",
#   "api_key": "fk-cached-access-token",
#   "expires_at": 1234567890000,
#   "last_refresh": 1234567890000
# }

# ===== 应用限制配置（可选） =====

# 密钥备注最大长度（字符，默认1000）
NOTES_MAX_LENGTH=1000

# JSON日志最大尺寸（字节，默认5000）
MAX_JSON_LOG_SIZE=5000

# ===== 密钥池配置（可选） =====

# 密钥选择算法（默认 round-robin）
# 传统算法:
#   - round-robin: 轮询，按顺序分配
#   - random: 随机选择
#   - least-used: 选择使用次数最少的
#   - weighted-score: 基于成功率和使用情况的加权评分
# 🆕 基于Token用量的智能算法:
#   - least-token-used: 选择已使用Token最少的密钥（均衡用量，推荐⭐）
#   - max-remaining: 选择剩余Token最多的密钥（避免耗尽，推荐⭐）
KEY_POOL_ALGORITHM=round-robin

# ===== 🆕 多级密钥池配置（可选，v1.4.0+）=====
# 使用场景：区分白嫖密钥和付费密钥，优先消耗白嫖池
# 优点：自动回退，智能分配，池子隔离，统一管理
# 配置方式：在 data/key_pool.json 中配置 poolGroups 数组
#
# 示例配置（在 data/key_pool.json 中）：
# {
#   "poolGroups": [
#     { "id": "freebies", "name": "白嫖池", "priority": 1 },
#     { "id": "main", "name": "主力池", "priority": 2 }
#   ],
#   "config": {
#     "multiTier": {
#       "enabled": true,
#       "autoFallback": true,
#       "strictMode": false
#     }
#   }
# }
#
# 📌 工作原理：
#   1. 按优先级排序池子（priority: 1 > 2 > 3）
#   2. 从优先级最高的池子中选择密钥
#   3. 如果当前池子无可用密钥，自动回退到下一个池子
#   4. 支持通过管理界面创建/删除池子，修改密钥所属池子
#
# 📖 详细文档：docs/MULTI_TIER_POOL.md
# 📄 示例配置：data/key_pool.example.json

# 重试配置
KEY_POOL_RETRY_ENABLED=true
KEY_POOL_RETRY_MAX=3
KEY_POOL_RETRY_DELAY_MS=1000

# 自动封禁配置
KEY_POOL_AUTO_BAN_ENABLED=true
KEY_POOL_ERROR_THRESHOLD=5
KEY_POOL_BAN_402=true
KEY_POOL_BAN_401=false

# 性能配置
KEY_POOL_CONCURRENT_LIMIT=100
KEY_POOL_REQUEST_TIMEOUT_MS=10000

# 其他配置（向后兼容）
KEY_POOL_BATCH_TEST_INTERVAL_MS=500
KEY_POOL_CACHE_TTL_MS=300000

# ===== 推理Token预算配置（可选） =====

# Low级别推理token预算（默认4096）
REASONING_BUDGET_LOW=4096

# Medium级别推理token预算（默认12288）
REASONING_BUDGET_MEDIUM=12288

# High级别推理token预算（默认24576）
REASONING_BUDGET_HIGH=24576

# ===== Factory余额管理配置（可选） =====

# Token使用量同步间隔（分钟，默认30）
SYNC_INTERVAL_MINUTES=30

# 余额数据保存间隔（分钟，默认5）
BALANCE_SAVE_INTERVAL_MINUTES=5

# 批量请求大小（默认5，避免触发限流）
BATCH_SIZE=5

# 数据保留天数（默认30，自动清理过期数据）
DATA_RETENTION_DAYS=30

# ===== Redis缓存配置（可选，性能优化） =====
# 注意：Redis 是可选功能，不启用系统也能正常运行！
# 启用 Redis 可提升性能 30-50%，适合高并发场景（日均请求 > 50万）

# Redis 服务器地址（默认 127.0.0.1）
# REDIS_HOST=127.0.0.1

# Redis 端口（默认 6379）
# REDIS_PORT=6379

# Redis 密码（如果设置了密码）
# REDIS_PASSWORD=your_password_here

# Redis 数据库编号（0-15，默认 0）
# REDIS_DB=0

# Redis 缓存键前缀（避免冲突，默认 droid2api:）
# REDIS_KEY_PREFIX=droid2api:

# ===== 集群模式配置（可选，极致性能） =====
# 注意：集群模式利用多核CPU，适合超高并发场景（日均请求 > 100万）
# 启用方式：设置 CLUSTER_MODE=true，然后 npm start

# 启用集群模式（默认 false，单进程模式）
# CLUSTER_MODE=true

# Worker 进程数（默认等于CPU核心数）
# 推荐设置：单机部署设置为CPU核心数，多机部署设置为核心数-1
# CLUSTER_WORKERS=4
